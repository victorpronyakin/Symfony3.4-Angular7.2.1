<?php

namespace AppBundle\Repository;
use AppBundle\Entity\Subscribers;
use AppBundle\Entity\SubscribersSequences;
use AppBundle\Entity\SubscribersTags;
use AppBundle\Entity\SubscribersWidgets;

/**
 * SubscribersRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class SubscribersRepository extends \Doctrine\ORM\EntityRepository
{
    /**
     * @param $page_id
     * @param $name
     * @return mixed
     */
    public function getSubscriberByName($page_id, $name){
        $query = $this->createQueryBuilder('s')
            ->select('s')
            ->where("s.page_id = :pageID")
            ->setParameter('pageID', $page_id)
            ->orderBy('s.dateSubscribed','DESC');

        $search = explode(" ", $name);
        if(count($search) > 1){
            $query->andWhere('(s.firstName LIKE :search1) AND (s.lastName LIKE :search2)')
                ->setParameter('search1', '%'.$search[0].'%')
                ->setParameter('search2', '%'.$search[1].'%');
        }
        else{
            $query->andWhere('(s.firstName LIKE :search) OR (s.lastName LIKE :search)')
                ->setParameter('search', '%'.$name.'%');
        }

        return $query->getQuery()->getResult();
    }

    /**
     * @param $page_id
     * @param $params
     * @return mixed
     *
     * {
     *      "search"=>"SEARCH firstName and lastName",
     *      "system"=>[
     *          {
     *              "name"=>"name",
     *              "criteria"=>"criteria",
     *              "value"=>"value"
     *          }
     *      ],
     *      "tags"=>[
     *          {
     *              "tagID"=>"tagID",
     *              "criteria"=>"criteria",
     *          }
     *      ],
     *      "widgets"=>[
     *          {
     *              "widgetID"=>"widgetID",
     *              "criteria"=>"criteria",
     *          }
     *      ],
     *      "sequences"=>[
     *          {
     *              "sequenceID"=>"sequenceID",
     *              "criteria"=>"criteria",
     *          }
     *      ],
     *      "customFields"=>[
     *          {
     *              "customFieldID"=>"customFieldID",
     *              "criteria"=>"criteria",
     *              "value"=>"value"
     *          }
     *      ],
     * }
     */
    public function getSubscribersByPageId($page_id, $params=[]){
        $query = $this->createQueryBuilder('s')
            ->select('s')
            ->where("s.page_id = :pageID")
            ->setParameter('pageID', $page_id)
            ->orderBy('s.dateSubscribed','DESC');

        if(isset($params['search']) && !empty($params['search'])){
            $search = explode(" ", $params['search']);
            if(count($search) > 1){
                $query->andWhere('(s.firstName LIKE :search1) AND (s.lastName LIKE :search2)')
                    ->setParameter('search1', '%'.$search[0].'%')
                    ->setParameter('search2', '%'.$search[1].'%');
            }
            else{
                $query->andWhere('(s.firstName LIKE :search) OR (s.lastName LIKE :search)')
                    ->setParameter('search', '%'.$params['search'].'%');
            }
        }

        //----------SYSTEM FIELDS------------
        if(isset($params['system']) && !empty($params['system'])){
            $systemFields = $params['system'];
            foreach ($systemFields as $key=>$field){
                if(isset($field['name']) && isset($field['criteria']) && isset($field['value'])){

                    switch ($field['name']){
                        case 'status':
                            if($field['criteria'] == 'is'){
                                if ($field['value'] == 'subscribe' || $field['value'] == 'unsubscribe'){
                                    $query->andWhere("s.status = :status$key");
                                    if($field['value'] == 'subscribe'){
                                        $query->setParameter("status$key", true);
                                    }
                                    else{
                                        $query->setParameter("status$key", false);
                                    }
                                }
                            }
                            break;
                        case 'gender':
                            if($field['criteria'] == 'is'){
                                if ($field['value'] == 'male' || $field['value'] == 'female'){
                                    $query->andWhere("s.gender = :gender$key")
                                        ->setParameter("gender$key", $field['value']);
                                }
                            }
                            break;

                        case 'locale':
                        case 'language':
                            if(!empty($field['value'])){
                                if($field['criteria'] == 'is'){
                                    $query->andWhere("s.locale = :locale$key")
                                        ->setParameter("locale$key", $field['value']);
                                }
                                elseif ($field['criteria'] == "isn't"){
                                    $query->andWhere("s.locale <> :locale$key")
                                        ->setParameter("locale$key", $field['value']);
                                }
                            }
                            break;

                        case 'timezone':
                            if(!empty($field['value'])){
                                if($field['criteria'] == 'is'){
                                    $query->andWhere("s.timezone = :timezone$key")
                                        ->setParameter("timezone$key", $field['value']);
                                }
                                elseif ($field['criteria'] == "isn't"){
                                    $query->andWhere("s.timezone <> :timezone$key")
                                        ->setParameter("timezone$key", $field['value']);
                                }
                                elseif ($field['criteria'] == 'greater_than'){
                                    $query->andWhere("s.timezone > :timezone$key")
                                        ->setParameter("timezone$key", $field['value']);
                                }
                                elseif ($field['criteria'] == 'less_than'){
                                    $query->andWhere("s.timezone < :timezone$key")
                                        ->setParameter("timezone$key", $field['value']);
                                }
                            }
                            break;

                        case 'firstName':
                            if(!empty($field['value'])){
                                if($field['criteria'] == 'is'){
                                    $query->andWhere("s.firstName = :firstName$key")
                                        ->setParameter("firstName$key", $field['value']);
                                }
                                elseif ($field['criteria'] == "isn't"){
                                    $query->andWhere("s.firstName <> :firstName$key")
                                        ->setParameter("firstName$key", $field['value']);
                                }
                                elseif ($field['criteria'] == 'contains'){
                                    $query->andWhere("s.firstName LIKE :firstName$key")
                                        ->setParameter("firstName$key", '%'.$field['value'].'%');
                                }
                                elseif ($field['criteria'] == 'not_contains'){
                                    $query->andWhere("s.firstName NOT LIKE :firstName$key")
                                        ->setParameter("firstName$key", '%'.$field['value'].'%');
                                }
                            }
                            break;

                        case 'lastName':
                            if(!empty($field['value'])){
                                if($field['criteria'] == 'is'){
                                    $query->andWhere("s.lastName = :lastName$key")
                                        ->setParameter("lastName$key", $field['value']);
                                }
                                elseif ($field['criteria'] == "isn't"){
                                    $query->andWhere("s.lastName <> :lastName$key")
                                        ->setParameter("lastName$key", $field['value']);
                                }
                                elseif ($field['criteria'] == 'contains'){
                                    $query->andWhere("s.lastName LIKE :lastName$key")
                                        ->setParameter("lastName$key", '%'.$field['value'].'%');
                                }
                                elseif ($field['criteria'] == 'not_contains'){
                                    $query->andWhere("s.lastName NOT LIKE :lastName$key")
                                        ->setParameter("lastName$key", '%'.$field['value'].'%');
                                }
                            }
                            break;

                        case 'dateSubscribed':
                            if(!empty($field['value'])){
                                if($field['value'] instanceof \DateTime){
                                    $dateSubscribed = $field['value'];
                                }
                                else{
                                    $dateSubscribed = new \DateTime($field['value']);
                                }
                                if($dateSubscribed instanceof \DateTime){
                                    if($field['criteria'] == 'after'){
                                        $query->andWhere("DATE_FORMAT(s.dateSubscribed, '%Y-%m-%d') > :dateSubscribed$key")
                                            ->setParameter("dateSubscribed$key", $dateSubscribed->format('Y-m-d'));
                                    }
                                    elseif ($field['criteria'] == "before"){
                                        $query->andWhere("DATE_FORMAT(s.dateSubscribed, '%Y-%m-%d') < :dateSubscribed$key")
                                            ->setParameter("dateSubscribed$key", $dateSubscribed->format('Y-m-d'));
                                    }
                                    elseif ($field['criteria'] == 'on'){
                                        $query->andWhere("DATE_FORMAT(s.dateSubscribed, '%Y-%m-%d') = :dateSubscribed$key")
                                            ->setParameter("dateSubscribed$key", $dateSubscribed->format('Y-m-d'));
                                    }
                                }

                            }
                            break;

                        case 'lastInteraction':
                            if(!empty($field['value'])){
                                if($field['value'] instanceof \DateTime){
                                    $lastInteraction = $field['value'];
                                }
                                else{
                                    $lastInteraction = new \DateTime($field['value']);
                                }
                                if($lastInteraction instanceof \DateTime){
                                    if($field['criteria'] == 'after'){
                                        $query->andWhere("DATE_FORMAT(s.lastInteraction, '%Y-%m-%d') > :lastInteraction$key")
                                            ->setParameter("lastInteraction$key", $lastInteraction->format('Y-m-d'));
                                    }
                                    elseif ($field['criteria'] == "before"){
                                        $query->andWhere("DATE_FORMAT(s.lastInteraction, '%Y-%m-%d') < :lastInteraction$key")
                                            ->setParameter("lastInteraction$key", $lastInteraction->format('Y-m-d'));
                                    }
                                    elseif ($field['criteria'] == 'on'){
                                        $query->andWhere("DATE_FORMAT(s.lastInteraction, '%Y-%m-%d') = :lastInteraction$key")
                                            ->setParameter("lastInteraction$key", $lastInteraction->format('Y-m-d'));
                                    }
                                }

                            }
                            break;
                    }

                }
            }


        }

        $result = $query->getQuery()->getResult();

        //----------TAGS--------
        if(!empty($result)){
            if(isset($params['tags']) && !empty($params['tags'])){
                $result = $this->searchByTag($result, $params['tags'], $page_id);
            }
        }

        //--------WIDGET------
        if(!empty($result)){
            if(isset($params['widgets']) && !empty($params['widgets'])) {
                $result = $this->searchByWidget($result, $params['widgets'], $page_id);
            }
        }

        //----------SEQUENCES---------
        if(!empty($result)){
            if(isset($params['sequences']) && !empty($params['sequences'])){
                $result = $this->searchBySequence($result, $params['sequences'], $page_id);
            }
        }

        //-------CUSTOM FIELDS-----
        if(!empty($result)){
            if(isset($params['customFields']) && !empty($params['customFields'])) {
                $result = $this->searchByCustomField($result, $params['customFields'], $page_id);
            }
        }


        return $result;
    }

    /**
     * @param $subscriberID
     * @param $page_id
     * @param $params
     * @return \Doctrine\ORM\QueryBuilder|mixed
     */
    public function checkConditionBySubscriberIdByPageId($subscriberID, $page_id, $params)
    {
        $query = $this->createQueryBuilder('s')
            ->select('s')
            ->where("s.page_id = :pageID")
            ->setParameter('pageID', $page_id)
            ->andWhere("s.id = :subscriberID")
            ->setParameter('subscriberID', $subscriberID);

        //----------SYSTEM FIELDS------------
        if (isset($params['system']) && !empty($params['system'])) {
            $systemFields = $params['system'];
            foreach ($systemFields as $field) {
                if (isset($field['name']) && isset($field['criteria']) && isset($field['value'])) {

                    switch ($field['name']) {
                        case 'gender':
                            if ($field['criteria'] == 'is') {
                                if ($field['value'] == 'male' || $field['value'] == 'female') {
                                    $query->andWhere('s.gender = :gender')
                                        ->setParameter('gender', $field['value']);
                                }
                            }
                            break;

                        case 'locale':
                        case 'language':
                            if (!empty($field['value'])) {
                                if ($field['criteria'] == 'is') {
                                    $query->andWhere('s.locale = :locale')
                                        ->setParameter('locale', $field['value']);
                                } elseif ($field['criteria'] == "isn't") {
                                    $query->andWhere('s.locale <> :locale')
                                        ->setParameter('locale', $field['value']);
                                }
                            }
                            break;

                        case 'timezone':
                            if (!empty($field['value'])) {
                                if ($field['criteria'] == 'is') {
                                    $query->andWhere('s.timezone = :timezone')
                                        ->setParameter('timezone', $field['value']);
                                } elseif ($field['criteria'] == "isn't") {
                                    $query->andWhere('s.timezone <> :timezone')
                                        ->setParameter('timezone', $field['value']);
                                } elseif ($field['criteria'] == 'greater_than') {
                                    $query->andWhere('s.timezone > :timezone')
                                        ->setParameter('timezone', $field['value']);
                                } elseif ($field['criteria'] == 'less_than') {
                                    $query->andWhere('s.timezone < :timezone')
                                        ->setParameter('timezone', $field['value']);
                                }
                            }
                            break;

                        case 'firstName':
                            if (!empty($field['value'])) {
                                if ($field['criteria'] == 'is') {
                                    $query->andWhere('s.firstName = :firstName')
                                        ->setParameter('firstName', $field['value']);
                                } elseif ($field['criteria'] == "isn't") {
                                    $query->andWhere('s.firstName <> :firstName')
                                        ->setParameter('firstName', $field['value']);
                                } elseif ($field['criteria'] == 'contains') {
                                    $query->andWhere('s.firstName LIKE :firstName')
                                        ->setParameter('firstName', '%' . $field['value'] . '%');
                                } elseif ($field['criteria'] == 'not_contains') {
                                    $query->andWhere('s.firstName NOT LIKE :firstName')
                                        ->setParameter('firstName', '%' . $field['value'] . '%');
                                }
                            }
                            break;

                        case 'lastName':
                            if (!empty($field['value'])) {
                                if ($field['criteria'] == 'is') {
                                    $query->andWhere('s.lastName = :lastName')
                                        ->setParameter('lastName', $field['value']);
                                } elseif ($field['criteria'] == "isn't") {
                                    $query->andWhere('s.lastName <> :lastName')
                                        ->setParameter('lastName', $field['value']);
                                } elseif ($field['criteria'] == 'contains') {
                                    $query->andWhere('s.lastName LIKE :lastName')
                                        ->setParameter('lastName', '%' . $field['value'] . '%');
                                } elseif ($field['criteria'] == 'not_contains') {
                                    $query->andWhere('s.lastName NOT LIKE :lastName')
                                        ->setParameter('lastName', '%' . $field['value'] . '%');
                                }
                            }
                            break;

                        case 'dateSubscribed':
                            if (!empty($field['value'])) {
                                if ($field['value'] instanceof \DateTime) {
                                    $dateSubscribed = $field['value'];
                                } else {
                                    $dateSubscribed = new \DateTime($field['value']);
                                }
                                if ($dateSubscribed instanceof \DateTime) {
                                    if ($field['criteria'] == 'after') {
                                        $query->andWhere("DATE_FORMAT(s.dateSubscribed, '%Y-%m-%d') > :dateSubscribed")
                                            ->setParameter('dateSubscribed', $dateSubscribed->format('Y-m-d'));
                                    } elseif ($field['criteria'] == "before") {
                                        $query->andWhere("DATE_FORMAT(s.dateSubscribed, '%Y-%m-%d') < :dateSubscribed")
                                            ->setParameter('dateSubscribed', $dateSubscribed->format('Y-m-d'));
                                    } elseif ($field['criteria'] == 'on') {
                                        $query->andWhere("DATE_FORMAT(s.dateSubscribed, '%Y-%m-%d') = :dateSubscribed")
                                            ->setParameter('dateSubscribed', $dateSubscribed->format('Y-m-d'));
                                    }
                                }

                            }
                            break;

                        case 'lastInteraction':
                            if (!empty($field['value'])) {
                                if ($field['value'] instanceof \DateTime) {
                                    $lastInteraction = $field['value'];
                                } else {
                                    $lastInteraction = new \DateTime($field['value']);
                                }
                                if ($lastInteraction instanceof \DateTime) {
                                    if ($field['criteria'] == 'after') {
                                        $query->andWhere("DATE_FORMAT(s.lastInteraction, '%Y-%m-%d') > :lastInteraction")
                                            ->setParameter('lastInteraction', $lastInteraction->format('Y-m-d'));
                                    } elseif ($field['criteria'] == "before") {
                                        $query->andWhere("DATE_FORMAT(s.lastInteraction, '%Y-%m-%d') < :lastInteraction")
                                            ->setParameter('lastInteraction', $lastInteraction->format('Y-m-d'));
                                    } elseif ($field['criteria'] == 'on') {
                                        $query->andWhere("DATE_FORMAT(s.lastInteraction, '%Y-%m-%d') = :lastInteraction")
                                            ->setParameter('lastInteraction', $lastInteraction->format('Y-m-d'));
                                    }
                                }

                            }
                            break;
                    }

                }
            }


        }

        $result = $query->getQuery()->getResult();

        //----------TAGS--------
        if (!empty($result)) {
            if (isset($params['tags']) && !empty($params['tags'])) {
                $result = $this->searchByTag($result, $params['tags'], $page_id);
            }
        }

        //--------WIDGET------
        if (!empty($result)) {
            if (isset($params['widgets']) && !empty($params['widgets'])) {
                $result = $this->searchByWidget($result, $params['widgets'], $page_id);
            }
        }

        //----------SEQUENCES---------
        if (!empty($result)) {
            if (isset($params['sequences']) && !empty($params['sequences'])) {
                $result = $this->searchBySequence($result, $params['sequences'], $page_id);
            }
        }

        //-------CUSTOM FIELDS-----
        if (!empty($result)) {
            if (isset($params['customFields']) && !empty($params['customFields'])) {
                $result = $this->searchByCustomField($result, $params['customFields'], $page_id);
            }
        }


        return $result;
    }

    /**
     * @param $subscriberID
     * @param $params
     * @return bool
     */
    public function checkAnyConditionBySubscriberId($subscriberID, $params)
    {
        //----------SYSTEM FIELDS------------
        if (isset($params['system']) && !empty($params['system'])) {
            foreach ($params['system'] as $field) {
                if (isset($field['name']) && isset($field['criteria']) && isset($field['value'])) {
                    switch ($field['name']) {
                        case 'gender':
                            if ($field['criteria'] == 'is') {
                                if ($field['value'] == 'male' || $field['value'] == 'female') {
                                    $result = $this->createQueryBuilder('s')
                                        ->select('s')
                                        ->where("s.id = :subscriberID")
                                        ->setParameter('subscriberID', $subscriberID)
                                        ->andWhere('s.gender = :gender')
                                        ->setParameter('gender', $field['value'])
                                        ->getQuery()
                                        ->getResult();
                                    if(!empty($result)){
                                        return true;
                                    }
                                }
                            }
                            break;

                        case 'locale':
                        case 'language':
                            if (!empty($field['value']) && in_array($field['criteria'], ["is","isn't"])) {
                                $query = $this->createQueryBuilder('s')
                                    ->select('s')
                                    ->where("s.id = :subscriberID")
                                    ->setParameter('subscriberID', $subscriberID);
                                if ($field['criteria'] == 'is') {
                                    $query->andWhere('s.locale = :locale')
                                        ->setParameter('locale', $field['value']);
                                } else{
                                    $query->andWhere('s.locale <> :locale')
                                        ->setParameter('locale', $field['value']);
                                }
                                $result = $query->getQuery()->getResult();
                                if(!empty($result)){
                                    return true;
                                }
                            }
                            break;

                        case 'timezone':
                            if (!empty($field['value']) && in_array($field['criteria'], ["is","isn't","greater_than","less_than"])) {
                                $query = $this->createQueryBuilder('s')
                                    ->select('s')
                                    ->where("s.id = :subscriberID")
                                    ->setParameter('subscriberID', $subscriberID);
                                if ($field['criteria'] == 'is') {
                                    $query->andWhere('s.timezone = :timezone')
                                        ->setParameter('timezone', $field['value']);
                                } elseif ($field['criteria'] == "isn't") {
                                    $query->andWhere('s.timezone <> :timezone')
                                        ->setParameter('timezone', $field['value']);
                                } elseif ($field['criteria'] == 'greater_than') {
                                    $query->andWhere('s.timezone > :timezone')
                                        ->setParameter('timezone', $field['value']);
                                } else {
                                    $query->andWhere('s.timezone < :timezone')
                                        ->setParameter('timezone', $field['value']);
                                }
                                $result = $query->getQuery()->getResult();
                                if(!empty($result)){
                                    return true;
                                }
                            }
                            break;

                        case 'firstName':
                            if (!empty($field['value']) && in_array($field['criteria'], ["is","isn't","contains","not_contains"])) {
                                $query = $this->createQueryBuilder('s')
                                    ->select('s')
                                    ->where("s.id = :subscriberID")
                                    ->setParameter('subscriberID', $subscriberID);
                                if ($field['criteria'] == 'is') {
                                    $query->andWhere('s.firstName = :firstName')
                                        ->setParameter('firstName', $field['value']);
                                } elseif ($field['criteria'] == "isn't") {
                                    $query->andWhere('s.firstName <> :firstName')
                                        ->setParameter('firstName', $field['value']);
                                } elseif ($field['criteria'] == 'contains') {
                                    $query->andWhere('s.firstName LIKE :firstName')
                                        ->setParameter('firstName', '%' . $field['value'] . '%');
                                } else{
                                    $query->andWhere('s.firstName NOT LIKE :firstName')
                                        ->setParameter('firstName', '%' . $field['value'] . '%');
                                }
                                $result = $query->getQuery()->getResult();
                                if(!empty($result)){
                                    return true;
                                }
                            }
                            break;

                        case 'lastName':
                            if (!empty($field['value']) && in_array($field['criteria'], ["is","isn't","contains","not_contains"])) {
                                $query = $this->createQueryBuilder('s')
                                    ->select('s')
                                    ->where("s.id = :subscriberID")
                                    ->setParameter('subscriberID', $subscriberID);
                                if ($field['criteria'] == 'is') {
                                    $query->andWhere('s.lastName = :lastName')
                                        ->setParameter('lastName', $field['value']);
                                } elseif ($field['criteria'] == "isn't") {
                                    $query->andWhere('s.lastName <> :lastName')
                                        ->setParameter('lastName', $field['value']);
                                } elseif ($field['criteria'] == 'contains') {
                                    $query->andWhere('s.lastName LIKE :lastName')
                                        ->setParameter('lastName', '%' . $field['value'] . '%');
                                } else{
                                    $query->andWhere('s.lastName NOT LIKE :lastName')
                                        ->setParameter('lastName', '%' . $field['value'] . '%');
                                }
                                $result = $query->getQuery()->getResult();
                                if(!empty($result)){
                                    return true;
                                }
                            }
                            break;

                        case 'dateSubscribed':
                            if (!empty($field['value']) && in_array($field['criteria'], ["after","before","on"])) {
                                if ($field['value'] instanceof \DateTime) {
                                    $dateSubscribed = $field['value'];
                                } else {
                                    $dateSubscribed = new \DateTime($field['value']);
                                }
                                if ($dateSubscribed instanceof \DateTime) {
                                    $query = $this->createQueryBuilder('s')
                                        ->select('s')
                                        ->where("s.id = :subscriberID")
                                        ->setParameter('subscriberID', $subscriberID);
                                    if ($field['criteria'] == 'after') {
                                        $query->andWhere("DATE_FORMAT(s.dateSubscribed, '%Y-%m-%d') > :dateSubscribed")
                                            ->setParameter('dateSubscribed', $dateSubscribed->format('Y-m-d'));
                                    } elseif ($field['criteria'] == "before") {
                                        $query->andWhere("DATE_FORMAT(s.dateSubscribed, '%Y-%m-%d') < :dateSubscribed")
                                            ->setParameter('dateSubscribed', $dateSubscribed->format('Y-m-d'));
                                    } else{
                                        $query->andWhere("DATE_FORMAT(s.dateSubscribed, '%Y-%m-%d') = :dateSubscribed")
                                            ->setParameter('dateSubscribed', $dateSubscribed->format('Y-m-d'));
                                    }
                                    $result = $query->getQuery()->getResult();
                                    if(!empty($result)){
                                        return true;
                                    }
                                }

                            }
                            break;

                        case 'lastInteraction':
                            if (!empty($field['value']) && in_array($field['criteria'], ["after","before","on"])) {
                                if ($field['value'] instanceof \DateTime) {
                                    $lastInteraction = $field['value'];
                                } else {
                                    $lastInteraction = new \DateTime($field['value']);
                                }
                                if ($lastInteraction instanceof \DateTime) {
                                    $query = $this->createQueryBuilder('s')
                                        ->select('s')
                                        ->where("s.id = :subscriberID")
                                        ->setParameter('subscriberID', $subscriberID);
                                    if ($field['criteria'] == 'after') {
                                        $query->andWhere("DATE_FORMAT(s.lastInteraction, '%Y-%m-%d') > :lastInteraction")
                                            ->setParameter('lastInteraction', $lastInteraction->format('Y-m-d'));
                                    } elseif ($field['criteria'] == "before") {
                                        $query->andWhere("DATE_FORMAT(s.lastInteraction, '%Y-%m-%d') < :lastInteraction")
                                            ->setParameter('lastInteraction', $lastInteraction->format('Y-m-d'));
                                    } else{
                                        $query->andWhere("DATE_FORMAT(s.lastInteraction, '%Y-%m-%d') = :lastInteraction")
                                            ->setParameter('lastInteraction', $lastInteraction->format('Y-m-d'));
                                    }
                                    $result = $query->getQuery()->getResult();
                                    if(!empty($result)){
                                        return true;
                                    }
                                }

                            }
                            break;
                    }

                }
            }


        }

        //----------TAGS--------
        if (isset($params['tags']) && !empty($params['tags'])) {
            foreach ($params['tags'] as $tag) {
                if (isset($tag['criteria']) && in_array($tag['criteria'],["is","isn't"]) && isset($tag['tagID']) && !empty($tag['tagID'])) {
                    $result = $this->createQueryBuilder('s')
                        ->from('AppBundle:SubscribersTags', 'st')
                        ->select('s')
                        ->where("s.id = :subscriberID")
                        ->setParameter('subscriberID', $subscriberID)
                        ->andWhere("st.subscriber = s.id")
                        ->andWhere("st.tag = :tagID")
                        ->setParameter("tagID", $tag['tagID'])
                        ->getQuery()
                        ->getResult();
                    if($tag['criteria'] == 'is' && !empty($result)){
                        return true;
                    }
                    if ($tag['criteria'] == "isn't" && empty($result)){
                        return true;
                    }
                }
            }
        }

        //--------WIDGET------
        if (isset($params['widgets']) && !empty($params['widgets'])) {
            foreach ($params['widgets'] as $widget) {
                if (isset($widget['criteria']) && in_array($widget['criteria'],["is","isn't"]) && isset($widget['widgetID']) && !empty($widget['widgetID'])) {
                    $result = $this->createQueryBuilder('s')
                        ->from('AppBundle:SubscribersWidgets', 'sw')
                        ->select('s')
                        ->where("s.id = :subscriberID")
                        ->setParameter('subscriberID', $subscriberID)
                        ->andWhere("sw.subscriber = s.id")
                        ->andWhere("sw.widget = :widgetID")
                        ->setParameter("widgetID", $widget['widgetID'])
                        ->getQuery()
                        ->getResult();
                    if($widget['criteria'] == 'is' && !empty($result)){
                        return true;
                    }
                    if ($widget['criteria'] == "isn't" && empty($result)){
                        return true;
                    }
                }
            }
        }

        //----------SEQUENCES---------
        if (isset($params['sequences']) && !empty($params['sequences'])) {
            foreach ($params['sequences'] as $sequence) {
                if (isset($sequence['criteria']) && in_array($sequence['criteria'],["is","isn't"]) && isset($sequence['sequenceID']) && !empty($sequence['sequenceID'])){
                    $result = $this->createQueryBuilder('s')
                        ->from('AppBundle:SubscribersSequences', 'ss')
                        ->select('s')
                        ->where("s.id = :subscriberID")
                        ->setParameter('subscriberID', $subscriberID)
                        ->andWhere("ss.subscriber = s.id")
                        ->andWhere("ss.sequence = :sequenceID")
                        ->setParameter("sequenceID", $sequence['sequenceID'])
                        ->getQuery()
                        ->getResult();
                    if($sequence['criteria'] == 'is' && !empty($result)){
                        return true;
                    }
                    if ($sequence['criteria'] == "isn't" && empty($result)){
                        return true;
                    }
                }
            }
        }

        //-------CUSTOM FIELDS-----
        if (isset($params['customFields']) && !empty($params['customFields'])) {
            foreach ($params['customFields'] as $customField) {
                if (isset($customField['criteria']) && isset($customField['customFieldID']) && !empty($customField['customFieldID']) && isset($customField['value']) && !empty($customField['value'])) {
                    if($customField['criteria'] == 'is'){
                        $result = $this->createQueryBuilder('s')
                            ->from('AppBundle:SubscribersCustomFields', 'scf')
                            ->select('s')
                            ->where("s.id = :subscriberID")
                            ->setParameter('subscriberID', $subscriberID)
                            ->andWhere("scf.subscriber = s.id")
                            ->andWhere("scf.customField = :customFieldID")
                            ->setParameter('customFieldID', $customField['customFieldID'])
                            ->andWhere("scf.value = :value")
                            ->setParameter('value', $customField['value'])
                            ->getQuery()
                            ->getResult();
                        if(!empty($result)){
                            return true;
                        }
                    }
                    if($customField['criteria'] == 'contains'){
                        $result = $this->createQueryBuilder('s')
                            ->from('AppBundle:SubscribersCustomFields', 'scf')
                            ->select('s')
                            ->where("s.id = :subscriberID")
                            ->setParameter('subscriberID', $subscriberID)
                            ->andWhere("scf.subscriber = s.id")
                            ->andWhere("scf.customField = :customFieldID")
                            ->setParameter('customFieldID', $customField['customFieldID'])
                            ->andWhere("scf.value LIKE :value")
                            ->setParameter('value', '%'.$customField['value'].'%')
                            ->getQuery()
                            ->getResult();
                        if(!empty($result)){
                            return true;
                        }
                    }
                    if($customField['criteria'] == 'greater_than'){
                        $result = $this->createQueryBuilder('s')
                            ->from('AppBundle:SubscribersCustomFields', 'scf')
                            ->select('s')
                            ->where("s.id = :subscriberID")
                            ->setParameter('subscriberID', $subscriberID)
                            ->andWhere("scf.subscriber = s.id")
                            ->andWhere("scf.customField = :customFieldID")
                            ->setParameter('customFieldID', $customField['customFieldID'])
                            ->andWhere("scf.value > :value")
                            ->setParameter('value', $customField['value'])
                            ->getQuery()
                            ->getResult();
                        if(!empty($result)){
                            return true;
                        }
                    }
                    if($customField['criteria'] == 'after'){
                        if($customField['value'] instanceof \DateTime){
                            $dateAfter = $customField['value'];
                        }
                        else{
                            $dateAfter = new \DateTime($customField['value']);
                        }
                        $result = $this->createQueryBuilder('s')
                            ->from('AppBundle:SubscribersCustomFields', 'scf')
                            ->select('s')
                            ->where("s.id = :subscriberID")
                            ->setParameter('subscriberID', $subscriberID)
                            ->andWhere("scf.subscriber = s.id")
                            ->andWhere("scf.customField = :customFieldID")
                            ->setParameter('customFieldID', $customField['customFieldID'])
                            ->andWhere("DATE_FORMAT(scf.value, '%Y-%m-%d') > :dateAfter")
                            ->setParameter('dateAfter', $dateAfter->format('Y-m-d'))
                            ->getQuery()
                            ->getResult();
                        if(!empty($result)){
                            return true;
                        }
                    }
                    if($customField['criteria'] == 'before'){
                        if($customField['value'] instanceof \DateTime){
                            $dateBefore = $customField['value'];
                        }
                        else{
                            $dateBefore = new \DateTime($customField['value']);
                        }
                        $result = $this->createQueryBuilder('s')
                            ->from('AppBundle:SubscribersCustomFields', 'scf')
                            ->select('s')
                            ->where("s.id = :subscriberID")
                            ->setParameter('subscriberID', $subscriberID)
                            ->andWhere("scf.subscriber = s.id")
                            ->andWhere("scf.customField = :customFieldID")
                            ->setParameter('customFieldID', $customField['customFieldID'])
                            ->andWhere("DATE_FORMAT(scf.value, '%Y-%m-%d') < :dateBefore")
                            ->setParameter('dateBefore', $dateBefore->format('Y-m-d'))
                            ->getQuery()
                            ->getResult();
                        if(!empty($result)){
                            return true;
                        }
                    }
                    if($customField['criteria'] == 'on'){
                        if($customField['value'] instanceof \DateTime){
                            $dateOn = $customField['value'];
                        }
                        else{
                            $dateOn = new \DateTime($customField['value']);
                        }
                        $result = $this->createQueryBuilder('s')
                            ->from('AppBundle:SubscribersCustomFields', 'scf')
                            ->select('s')
                            ->where("s.id = :subscriberID")
                            ->setParameter('subscriberID', $subscriberID)
                            ->andWhere("scf.subscriber = s.id")
                            ->andWhere("scf.customField = :customFieldID")
                            ->setParameter('customFieldID', $customField['customFieldID'])
                            ->andWhere("DATE_FORMAT(scf.value, '%Y-%m-%d') = :dateOn")
                            ->setParameter('dateOn', $dateOn->format('Y-m-d'))
                            ->getQuery()
                            ->getResult();
                        if(!empty($result)){
                            return true;
                        }
                    }
                    if($customField['criteria'] == "isn't"){
                        $result = $this->createQueryBuilder('s')
                            ->from('AppBundle:SubscribersCustomFields', 'scf')
                            ->select('s')
                            ->where("s.id = :subscriberID")
                            ->setParameter('subscriberID', $subscriberID)
                            ->andWhere("scf.subscriber = s.id")
                            ->andWhere("scf.customField = :customFieldID")
                            ->setParameter('customFieldID', $customField['customFieldID'])
                            ->andWhere("scf.value = :value")
                            ->setParameter('value', $customField['value'])
                            ->getQuery()
                            ->getResult();
                        if(empty($result)){
                            return true;
                        }
                    }
                    if($customField['criteria'] == "not_contains"){
                        $result = $this->createQueryBuilder('s')
                            ->from('AppBundle:SubscribersCustomFields', 'scf')
                            ->select('s')
                            ->where("s.id = :subscriberID")
                            ->setParameter('subscriberID', $subscriberID)
                            ->andWhere("scf.subscriber = s.id")
                            ->andWhere("scf.customField = :customFieldID")
                            ->setParameter('customFieldID', $customField['customFieldID'])
                            ->andWhere("scf.value LIKE :value")
                            ->setParameter('value', '%'.$customField['value'].'%')
                            ->getQuery()
                            ->getResult();
                        if(empty($result)){
                            return true;
                        }
                    }

                }
            }
        }

        return false;
    }

    /**
     * @param $page_id
     * @param $params
     * @return array
     * @throws \Doctrine\DBAL\DBALException
     */
    public function findSubscribersForChart($page_id, $params)
    {
        $startDate = new \DateTime('-7 days');
        $endDate = new \DateTime();
        $type = 'active';
        if(isset($params['type']) && !empty($params['type'])){
            $type = $params['type'];
        }
        if(isset($params['startDate']) && !empty($params['startDate'])){
            if($params['startDate'] instanceof \DateTime){
                $startDate = $params['startDate'];
            }
            else{
                $startDate = new \DateTime($params['startDate']);
            }
        }
        if(isset($params['endDate']) && !empty($params['endDate'])){
            if($params['endDate'] instanceof \DateTime){
                $endDate = $params['endDate'];
            }
            else{
                $endDate = new \DateTime($params['endDate']);
            }
        }
        $forChat = [];
        $forChat['chart'] = [];
        if($type == 'active'){
            $sql = "SELECT UNIX_TIMESTAMP(selected_date) as days, (SELECT COUNT(*) FROM subscribers WHERE DATE_FORMAT(date_subscribed, '%Y-%m-%d') <= selected_date AND status=true AND page_id=$page_id) as count_subs  
                 FROM 
                    (SELECT adddate('1970-01-01',t4*10000 + t3*1000 + t2*100 + t1*10 + t0) as selected_date from
                     (select 0 t0 union select 1 union select 2 union select 3 union select 4 union select 5 union select 6 union select 7 union select 8 union select 9) t0,
                     (select 0 t1 union select 1 union select 2 union select 3 union select 4 union select 5 union select 6 union select 7 union select 8 union select 9) t1,
                     (select 0 t2 union select 1 union select 2 union select 3 union select 4 union select 5 union select 6 union select 7 union select 8 union select 9) t2,
                     (select 0 t3 union select 1 union select 2 union select 3 union select 4 union select 5 union select 6 union select 7 union select 8 union select 9) t3,
                     (select 0 t4 union select 1 union select 2 union select 3 union select 4 union select 5 union select 6 union select 7 union select 8 union select 9) t4) v
                    WHERE selected_date between '".$startDate->format('Y-m-d')."' AND '".$endDate->format('Y-m-d')."'";
            $stmt = $this->getEntityManager()->getConnection()->prepare($sql);
            $stmt->execute();
            $result = $stmt->fetchAll();
            foreach ($result as $item){
                $forChat['chart'][] = [(integer)($item['days']+3*60*60)*1000,(integer)$item['count_subs']];
            }
        }
        elseif($type == 'net'){
            $sql = "SELECT UNIX_TIMESTAMP(selected_date) as days, (SELECT COUNT(*) FROM subscribers WHERE DATE_FORMAT(date_subscribed, '%Y-%m-%d') = selected_date AND status=true AND page_id=$page_id) as count_subs   
                 FROM 
                    (SELECT adddate('1970-01-01',t4*10000 + t3*1000 + t2*100 + t1*10 + t0) as selected_date from
                     (select 0 t0 union select 1 union select 2 union select 3 union select 4 union select 5 union select 6 union select 7 union select 8 union select 9) t0,
                     (select 0 t1 union select 1 union select 2 union select 3 union select 4 union select 5 union select 6 union select 7 union select 8 union select 9) t1,
                     (select 0 t2 union select 1 union select 2 union select 3 union select 4 union select 5 union select 6 union select 7 union select 8 union select 9) t2,
                     (select 0 t3 union select 1 union select 2 union select 3 union select 4 union select 5 union select 6 union select 7 union select 8 union select 9) t3,
                     (select 0 t4 union select 1 union select 2 union select 3 union select 4 union select 5 union select 6 union select 7 union select 8 union select 9) t4) v
                    WHERE selected_date between '".$startDate->format('Y-m-d')."' AND '".$endDate->format('Y-m-d')."'";
            $stmt = $this->getEntityManager()->getConnection()->prepare($sql);
            $stmt->execute();
            $result = $stmt->fetchAll();
            foreach ($result as $item){
                $forChat['chart'][] = [(integer)($item['days']+3*60*60)*1000,(integer)$item['count_subs']];
            }
        }
        elseif($type == "sub-unsub"){
            $sql = "SELECT UNIX_TIMESTAMP(selected_date) as days, (SELECT COUNT(*) FROM subscribers WHERE DATE_FORMAT(date_subscribed, '%Y-%m-%d') = selected_date AND status=true AND page_id=$page_id) as count_subs   
                 FROM 
                    (SELECT adddate('1970-01-01',t4*10000 + t3*1000 + t2*100 + t1*10 + t0) as selected_date from
                     (select 0 t0 union select 1 union select 2 union select 3 union select 4 union select 5 union select 6 union select 7 union select 8 union select 9) t0,
                     (select 0 t1 union select 1 union select 2 union select 3 union select 4 union select 5 union select 6 union select 7 union select 8 union select 9) t1,
                     (select 0 t2 union select 1 union select 2 union select 3 union select 4 union select 5 union select 6 union select 7 union select 8 union select 9) t2,
                     (select 0 t3 union select 1 union select 2 union select 3 union select 4 union select 5 union select 6 union select 7 union select 8 union select 9) t3,
                     (select 0 t4 union select 1 union select 2 union select 3 union select 4 union select 5 union select 6 union select 7 union select 8 union select 9) t4) v
                    WHERE selected_date between '".$startDate->format('Y-m-d')."' AND '".$endDate->format('Y-m-d')."'";
            $stmt = $this->getEntityManager()->getConnection()->prepare($sql);
            $stmt->execute();
            $result['subs'] = $stmt->fetchAll();
            $sql = "SELECT UNIX_TIMESTAMP(selected_date) as days, (SELECT COUNT(*) FROM subscribers WHERE DATE_FORMAT(date_subscribed, '%Y-%m-%d') = selected_date AND status=false AND page_id=$page_id) as count_subs   
                 FROM 
                    (SELECT adddate('1970-01-01',t4*10000 + t3*1000 + t2*100 + t1*10 + t0) as selected_date from
                     (select 0 t0 union select 1 union select 2 union select 3 union select 4 union select 5 union select 6 union select 7 union select 8 union select 9) t0,
                     (select 0 t1 union select 1 union select 2 union select 3 union select 4 union select 5 union select 6 union select 7 union select 8 union select 9) t1,
                     (select 0 t2 union select 1 union select 2 union select 3 union select 4 union select 5 union select 6 union select 7 union select 8 union select 9) t2,
                     (select 0 t3 union select 1 union select 2 union select 3 union select 4 union select 5 union select 6 union select 7 union select 8 union select 9) t3,
                     (select 0 t4 union select 1 union select 2 union select 3 union select 4 union select 5 union select 6 union select 7 union select 8 union select 9) t4) v
                    WHERE selected_date between '".$startDate->format('Y-m-d')."' AND '".$endDate->format('Y-m-d')."'";
            $stmt = $this->getEntityManager()->getConnection()->prepare($sql);
            $stmt->execute();
            $result['unsubs'] = $stmt->fetchAll();
            foreach ($result as $key=>$type_subs){
                foreach ($type_subs as $item){
                    $forChat['chart'][$key][] = [(integer)($item['days']+3*60*60)*1000,(integer)$item['count_subs']];
                }
            }
        }

        $stats = $this->createQueryBuilder('s')
            ->select('s.status, COUNT(s) as count_subs')
            ->where("s.page_id = :pageID")
            ->setParameter('pageID', $page_id)
            ->andWhere("DATE_FORMAT(s.dateSubscribed, '%Y-%m-%d') between :startDate AND :endDate")
            ->setParameter('startDate', $startDate->format('Y-m-d'))
            ->setParameter('endDate', $endDate->format('Y-m-d'))
            ->groupBy('s.status')
            ->getQuery()->getResult();

        if(!empty($stats)){
            foreach ($stats as $item){
                if($item['status'] === true){
                    $forChat['stats']['subs'] = $item['count_subs'];
                    $forChat['stats']['net'] = $item['count_subs'];
                }
                elseif($item['status'] === false){
                    $forChat['stats']['unsubs'] = $item['count_subs'];
                }
            }
            if(!isset($forChat['stats']['subs'])){
                $forChat['stats']['subs'] = 0;
                $forChat['stats']['net'] = 0;
            }
            elseif (!isset($forChat['stats']['unsubs'])){
                $forChat['stats']['unsubs'] = 0;
            }
        }
        else{
            $forChat['stats']=['subs'=>0,'unsubs'=>0,'net'=>0];
        }

        return $forChat;
    }

    /**
     * @param null $page_id
     * @return array
     */
    public function getSubscriberForMap($page_id=null){
        $query = $this->createQueryBuilder('s')
            ->select('s.locale, count(s) as subscribers')
            ->where("s.status = :true")
            ->setParameter('true', true)
            ->groupBy('s.locale');
        if(!is_null($page_id)){
            $query->andWhere('s.page_id = :page_id')
                ->setParameter('page_id', $page_id);
        }
        $result = $query->getQuery()->getArrayResult();
        $subscribersMap = [];
        if(!empty($result)){
            foreach ($result as $item){
                $keys = explode('_',$item['locale']);
                if(isset($keys[1])){
                    $subscribersMap[] = [
                        'code' => $keys[1],
                        'value' => intval($item['subscribers']),
                        'name' => locale_get_display_region($item['locale'])
                    ];
                }
            }
        }

        return $subscribersMap;
    }

    /**
     * @param $userID
     * @return array
     */
    public function getSubscriberForMapByUserId($userID){
        $query = $this->createQueryBuilder('s')
            ->from("AppBundle:Page", 'p')
            ->select('s.locale, count(s) as subscribers')
            ->where('p.user = :userID')
            ->setParameter('userID', $userID)
            ->andWhere('s.page_id = p.page_id')
            ->andWhere("s.status = :true")
            ->setParameter('true', true)
            ->groupBy('s.locale');

        $result = $query->getQuery()->getArrayResult();
        $subscribersMap = [];
        if(!empty($result)){
            foreach ($result as $item){
                $keys = explode('_',$item['locale']);
                if(isset($keys[1])){
                    $subscribersMap[] = [
                        'code' => $keys[1],
                        'value' => intval($item['subscribers']),
                        'name' => locale_get_display_region($item['locale'])
                    ];
                }
            }
        }

        return $subscribersMap;
    }

    /**
     * @param $userID
     * @return int
     */
    public function countAllByUserId($userID){
        $result = $this->createQueryBuilder('s')
            ->from("AppBundle:Page", 'p')
            ->select('count(s) as subscribers')
            ->where('p.user = :userID')
            ->setParameter('userID', $userID)
            ->andWhere('s.page_id = p.page_id')
            ->andWhere("s.status = :true")
            ->setParameter('true', true)
            ->getQuery()->getResult();


        return (isset($result[0]['subscribers']) && intval($result[0]['subscribers'])>0) ? intval($result[0]['subscribers']) : 0;
    }

    /**
     * @param $result
     * @param $tags
     * @param $page_id
     * @return array|mixed
     */
    private function searchByTag($result, $tags, $page_id){
        $subscribersIds = [];
        foreach ($result as $subscriber){
            if($subscriber instanceof Subscribers){
                $subscribersIds[] = $subscriber->getId();
            }
        }

        $tagIds_is = [];
        $tagIds_isnt = [];
        foreach ($tags as $tag) {
            if (isset($tag['criteria']) && isset($tag['tagID'])) {
                if($tag['criteria'] == 'is'){
                    $tagIds_is[] = $tag['tagID'];
                }
                elseif ($tag['criteria'] == "isn't"){
                    $tagIds_isnt[] = $tag['tagID'];
                }
            }
        }
        $resultSubscribersTags = $this->createQueryBuilder('s')
            ->from('AppBundle:SubscribersTags', 'st')
            ->select('st')
            ->where('s.id = st.subscriber')
            ->andWhere("s.id IN (:subscriberIds)")
            ->setParameter("subscriberIds", $subscribersIds)
            ->getQuery()
            ->getResult();
        $subscribersTags = [];
        foreach ($resultSubscribersTags as $resultSubscribersTag){
            if($resultSubscribersTag instanceof SubscribersTags){
                $subscribersTags[$resultSubscribersTag->getSubscriber()->getId()]['tags'][] = $resultSubscribersTag->getTag()->getId();
            }
        }
        $subscribersIds = [];
        foreach ($subscribersTags as $subscriberID => $subscribersTag){
            if(isset($subscribersTag['tags']) && !empty($subscribersTag['tags'])){
                if(empty(array_diff($tagIds_is, array_intersect($subscribersTag['tags'], $tagIds_is)))){
                    $subscribersIds[] = $subscriberID;
                }
            }
        }

        $result = $this->createQueryBuilder('s')
            ->select('s')
            ->where("s.id IN (:subscriberIds)")
            ->setParameter("subscriberIds", $subscribersIds)
            ->orderBy('s.lastInteraction','DESC')
            ->getQuery()
            ->getResult();

        if(!empty($result) && !empty($tagIds_isnt)){
            $subscribersIds = [];
            foreach ($result as $subscriber){
                if($subscriber instanceof Subscribers){
                    $subscribersIds[] = $subscriber->getId();
                }
            }

            $resultTagIsnt = $this->createQueryBuilder('s')
                ->from('AppBundle:SubscribersTags', 'st')
                ->select('s.id')
                ->where("st.subscriber = s.id")
                ->andWhere("st.tag IN (:tags_ids)")
                ->setParameter("tags_ids", $tagIds_isnt)
                ->andWhere("s.page_id = :pageID")
                ->setParameter("pageID", $page_id)
                ->getQuery()
                ->getResult();

            $subscriberIdsTagIsnt = [];
            foreach ($resultTagIsnt as $item){
                if(isset($item['id'])){
                    $subscriberIdsTagIsnt[] = $item['id'];
                }
            }
            if(!empty($subscriberIdsTagIsnt)){
                $result = $this->createQueryBuilder('s')
                    ->select('s')
                    ->where("s.id NOT IN (:subscriberIdsTagIsnt)")
                    ->setParameter("subscriberIdsTagIsnt", $subscriberIdsTagIsnt)
                    ->andWhere("s.id IN (:subscriberIds)")
                    ->setParameter("subscriberIds", $subscribersIds)
                    ->orderBy('s.lastInteraction','DESC')
                    ->getQuery()
                    ->getResult();
            }
        }

        return $result;
    }

    /**
     * @param $result
     * @param $widgets
     * @param $page_id
     * @return mixed
     */
    private function searchByWidget($result, $widgets, $page_id){
        $subscribersIds = [];
        foreach ($result as $subscriber) {
            if ($subscriber instanceof Subscribers) {
                $subscribersIds[] = $subscriber->getId();
            }
        }

        $widgetIds_is = [];
        $widgetIds_isnt = [];
        foreach ($widgets as $widget) {
            if (isset($widget['criteria']) && isset($widget['widgetID'])) {
                if($widget['criteria'] == 'is'){
                    $widgetIds_is[] = $widget['widgetID'];
                }
                elseif ($widget['criteria'] == "isn't"){
                    $widgetIds_isnt[] = $widget['widgetID'];
                }
            }
        }
        $resultSubscribersWidgets = $this->createQueryBuilder('s')
            ->from('AppBundle:SubscribersWidgets', 'sw')
            ->select('sw')
            ->where('s.id = sw.subscriber')
            ->andWhere("s.id IN (:subscriberIds)")
            ->setParameter("subscriberIds", $subscribersIds)
            ->getQuery()
            ->getResult();
        $subscribersWidgets = [];
        foreach ($resultSubscribersWidgets as $resultSubscribersWidget){
            if($resultSubscribersWidget instanceof SubscribersWidgets){
                $subscribersWidgets[$resultSubscribersWidget->getSubscriber()->getId()]['widgets'][] = $resultSubscribersWidget->getWidget()->getId();
            }
        }
        $subscribersIds = [];
        foreach ($subscribersWidgets as $subscriberID => $subscribersWidget){
            if(isset($subscribersWidget['widgets']) && !empty($subscribersWidget['widgets'])){
                if(empty(array_diff($widgetIds_is, array_intersect($subscribersWidget['widgets'], $widgetIds_is)))){
                    $subscribersIds[] = $subscriberID;
                }
            }
        }

        $result = $this->createQueryBuilder('s')
            ->select('s')
            ->where("s.id IN (:subscriberIds)")
            ->setParameter("subscriberIds", $subscribersIds)
            ->orderBy('s.lastInteraction','DESC')
            ->getQuery()
            ->getResult();

        if(!empty($result) && !empty($widgetIds_isnt)){
            $subscribersIds = [];
            foreach ($result as $subscriber){
                if($subscriber instanceof Subscribers){
                    $subscribersIds[] = $subscriber->getId();
                }
            }

            $resultWidgetIsnt = $this->createQueryBuilder('s')
                ->from('AppBundle:SubscribersWidgets', 'sw')
                ->select('s.id')
                ->where("sw.subscriber = s.id")
                ->andWhere("sw.widget IN (:widgets_ids)")
                ->setParameter("widgets_ids", $widgetIds_isnt)
                ->andWhere("s.page_id = :pageID")
                ->setParameter("pageID", $page_id)
                ->getQuery()
                ->getResult();

            $subscriberIdsWidgetIsnt = [];
            foreach ($resultWidgetIsnt as $item){
                if(isset($item['id'])){
                    $subscriberIdsWidgetIsnt[] = $item['id'];
                }
            }
            if(!empty($subscriberIdsWidgetIsnt)){
                $result = $this->createQueryBuilder('s')
                    ->select('s')
                    ->where("s.id NOT IN (:subscriberIdsWidgetIsnt)")
                    ->setParameter("subscriberIdsWidgetIsnt", $subscriberIdsWidgetIsnt)
                    ->andWhere("s.id IN (:subscriberIds)")
                    ->setParameter("subscriberIds", $subscribersIds)
                    ->orderBy('s.lastInteraction','DESC')
                    ->getQuery()
                    ->getResult();

            }
        }

        return $result;
    }

    /**
     * @param $result
     * @param $sequences
     * @param $page_id
     * @return mixed
     */
    private function searchBySequence($result, $sequences, $page_id){
        $subscribersIds = [];
        foreach ($result as $subscriber){
            if($subscriber instanceof Subscribers){
                $subscribersIds[] = $subscriber->getId();
            }
        }

        $sequenceIds_is = [];
        $sequenceIds_isnt = [];
        foreach ($sequences as $sequence) {
            if (isset($sequence['criteria']) && isset($sequence['sequenceID'])) {
                if($sequence['criteria'] == 'is'){
                    $sequenceIds_is[] = $sequence['sequenceID'];
                }
                elseif ($sequence['criteria'] == "isn't"){
                    $sequenceIds_isnt[] = $sequence['sequenceID'];
                }
            }
        }
        $resultSubscribersSequences = $this->createQueryBuilder('s')
            ->from('AppBundle:SubscribersSequences', 'ss')
            ->select('ss')
            ->where('s.id = ss.subscriber')
            ->andWhere("s.id IN (:subscriberIds)")
            ->setParameter("subscriberIds", $subscribersIds)
            ->getQuery()
            ->getResult();
        $subscribersSequences = [];
        foreach ($resultSubscribersSequences as $resultSubscribersSequence){
            if($resultSubscribersSequence instanceof SubscribersSequences){
                $subscribersSequences[$resultSubscribersSequence->getSubscriber()->getId()]['sequences'][] = $resultSubscribersSequence->getSequence()->getId();
            }
        }
        $subscribersIds = [];
        foreach ($subscribersSequences as $subscriberID => $subscribersSequence){
            if(isset($subscribersSequence['sequences']) && !empty($subscribersSequence['sequences'])){
                if(empty(array_diff($sequenceIds_is, array_intersect($subscribersSequence['sequences'], $sequenceIds_is)))){
                    $subscribersIds[] = $subscriberID;
                }
            }
        }

        $result = $this->createQueryBuilder('s')
            ->select('s')
            ->where("s.id IN (:subscriberIds)")
            ->setParameter("subscriberIds", $subscribersIds)
            ->orderBy('s.lastInteraction','DESC')
            ->getQuery()
            ->getResult();

        if(!empty($result) && !empty($sequenceIds_isnt)){
            $subscribersIds = [];
            foreach ($result as $subscriber){
                if($subscriber instanceof Subscribers){
                    $subscribersIds[] = $subscriber->getId();
                }
            }

            $resultSequenceIdsIsnt = $this->createQueryBuilder('s')
                ->from('AppBundle:SubscribersSequences', 'ss')
                ->select('s.id')
                ->where("ss.subscriber = s.id")
                ->andWhere("ss.sequence IN (:sequence_ids)")
                ->setParameter("sequence_ids", $sequenceIds_isnt)
                ->andWhere("s.page_id = :pageID")
                ->setParameter("pageID", $page_id)
                ->getQuery()
                ->getResult();

            $subscriberIdsSequenceIsnt = [];
            foreach ($resultSequenceIdsIsnt as $item){
                if(isset($item['id'])){
                    $subscriberIdsSequenceIsnt[] = $item['id'];
                }
            }
            if(!empty($subscriberIdsSequenceIsnt)){
                $result = $this->createQueryBuilder('s')
                    ->select('s')
                    ->where("s.id NOT IN (:subscriberIdsSequenceIsnt)")
                    ->setParameter("subscriberIdsSequenceIsnt", $subscriberIdsSequenceIsnt)
                    ->andWhere("s.id IN (:subscriberIds)")
                    ->setParameter("subscriberIds", $subscribersIds)
                    ->orderBy('s.lastInteraction','DESC')
                    ->getQuery()
                    ->getResult();
            }
        }

        return $result;
    }

    /**
     * @param $result
     * @param $customFields
     * @param $page_id
     * @return \Doctrine\ORM\QueryBuilder|mixed
     */
    private function searchByCustomField($result, $customFields, $page_id){
        $subscribersIds = [];
        foreach ($result as $subscriber) {
            if ($subscriber instanceof Subscribers) {
                $subscribersIds[] = $subscriber->getId();
            }
        }

        $customFieldsPlus = [];
        $customFieldsMinus = [];
        foreach ($customFields as $customField) {
            if (isset($customField['criteria']) && isset($customField['customFieldID']) && isset($customField['value'])) {
                if($customField['criteria'] == 'is'
                    || $customField['criteria'] == 'contains'
                    || $customField['criteria'] == 'greater_than'
                    || $customField['criteria'] == 'less_than'
                    || $customField['criteria'] == 'after'
                    || $customField['criteria'] == 'before'
                    || $customField['criteria'] == 'on'
                ){
                    $customFieldsPlus[] = $customField;
                }
                elseif ($customField['criteria'] == "isn't" || $customField['criteria'] == "not_contains"){
                    if($customField['criteria'] == "isn't"){
                        $customField['criteria'] = 'is';
                    }
                    else{
                        $customField['criteria'] = 'contains';
                    }
                    $customFieldsMinus[] = $customField;
                }
            }
        }

        if(!empty($customFieldsPlus)){
            $query = $this->createQueryBuilder('s')
                ->from('AppBundle:SubscribersCustomFields', 'scf')
                ->select('s')
                ->where("scf.subscriber = s.id")
                ->andWhere("s.id IN (:subscriberIds)")
                ->setParameter("subscriberIds", $subscribersIds);

            foreach ($customFieldsPlus as $key=>$fieldsPlus){
                if(isset($fieldsPlus['criteria']) && isset($fieldsPlus['customFieldID']) && isset($fieldsPlus['value'])){
                    if($fieldsPlus['criteria'] == 'is'){
                        $query->andWhere("(scf.customField = :customFieldID AND scf.value = :value$key)")
                            ->setParameter('customFieldID', $fieldsPlus['customFieldID'])
                            ->setParameter("value$key", $fieldsPlus['value']);
                    }
                    elseif($fieldsPlus['criteria'] == 'contains'){
                        $query->andWhere("(scf.customField = :customFieldID0 AND scf.value LIKE :value$key)")
                            ->setParameter('customFieldID0', $fieldsPlus['customFieldID'])
                            ->setParameter("value$key", '%'.$fieldsPlus['value'].'%');
                    }
                    elseif ($fieldsPlus['criteria'] == 'greater_than'){
                        $query->andWhere("(scf.customField = :customFieldID1 AND scf.value > :value$key)")
                            ->setParameter('customFieldID1', $fieldsPlus['customFieldID'])
                            ->setParameter("value$key", $fieldsPlus['value']);
                    }
                    elseif ($fieldsPlus['criteria'] == 'less_than'){
                        $query->andWhere("(scf.customField = :customFieldID2 AND scf.value < :value$key)")
                            ->setParameter('customFieldID2', $fieldsPlus['customFieldID'])
                            ->setParameter("value$key", $fieldsPlus['value']);
                    }
                    elseif ($fieldsPlus['criteria'] == 'after'){
                        if($fieldsPlus['value'] instanceof \DateTime){
                            $dateAfter = $fieldsPlus['value'];
                        }
                        else{
                            $dateAfter = new \DateTime($fieldsPlus['value']);
                        }
                        $query->andWhere("(scf.customField = :customFieldID3 AND DATE_FORMAT(scf.value, '%Y-%m-%d') > :dateAfter$key)")
                            ->setParameter('customFieldID3', $fieldsPlus['customFieldID'])
                            ->setParameter("dateAfter$key", $dateAfter->format('Y-m-d'));
                    }
                    elseif ($fieldsPlus['criteria'] == 'before'){
                        if($fieldsPlus['value'] instanceof \DateTime){
                            $dateBefore = $fieldsPlus['value'];
                        }
                        else{
                            $dateBefore = new \DateTime($fieldsPlus['value']);
                        }
                        $query->andWhere("(scf.customField = :customFieldID4 AND DATE_FORMAT(scf.value, '%Y-%m-%d') < :dateBefore$key)")
                            ->setParameter('customFieldID4', $fieldsPlus['customFieldID'])
                            ->setParameter("dateBefore$key", $dateBefore->format('Y-m-d'));
                    }
                    elseif ($fieldsPlus['criteria'] == 'on'){
                        if($fieldsPlus['value'] instanceof \DateTime){
                            $dateOn = $fieldsPlus['value'];
                        }
                        else{
                            $dateOn = new \DateTime($fieldsPlus['value']);
                        }
                        $query->andWhere("(scf.customField = :customFieldID5 AND DATE_FORMAT(scf.value, '%Y-%m-%d') = :dateOn$key)")
                            ->setParameter('customFieldID5', $fieldsPlus['customFieldID'])
                            ->setParameter("dateOn$key", $dateOn->format('Y-m-d'));
                    }
                }
            }
            $result = $query->orderBy('s.lastInteraction','DESC')
                ->getQuery()
                ->getResult();
        }

        if(!empty($result) && !empty($customFieldsMinus)) {
            $subscribersIds = [];
            foreach ($result as $subscriber) {
                if ($subscriber instanceof Subscribers) {
                    $subscribersIds[] = $subscriber->getId();
                }
            }
            $queryCustomFieldsMinus = $this->createQueryBuilder('s')
                ->from('AppBundle:SubscribersCustomFields', 'scf')
                ->select('s.id')
                ->where("scf.subscriber = s.id")
                ->andWhere("s.page_id = :pageID")
                ->setParameter("pageID", $page_id);
            foreach ($customFieldsMinus as $key=>$fieldsMinus){
                if(isset($fieldsMinus['criteria']) && isset($fieldsMinus['customFieldID']) && isset($fieldsMinus['value'])) {
                    if ($fieldsMinus['criteria'] == 'is') {
                        $queryCustomFieldsMinus->andWhere("(scf.customField = :customFieldID AND scf.value = :value$key)")
                            ->setParameter('customFieldID', $fieldsMinus['customFieldID'])
                            ->setParameter("value$key", $fieldsMinus['value']);
                    }
                    if ($fieldsMinus['criteria'] == 'contains') {
                        $queryCustomFieldsMinus->andWhere("(scf.customField = :customFieldID0 AND scf.value LIKE :value$key)")
                            ->setParameter('customFieldID0', $fieldsMinus['customFieldID'])
                            ->setParameter("value$key", '%' . $fieldsMinus['value'] . '%');
                    }
                }
            }
            $resultCustomFieldsMinus = $queryCustomFieldsMinus->getQuery()->getResult();

            $subscriberIdsCustomFieldMinus = [];
            foreach ($resultCustomFieldsMinus as $item){
                if(isset($item['id'])){
                    $subscriberIdsCustomFieldMinus[] = $item['id'];
                }
            }
            if(!empty($subscriberIdsCustomFieldMinus)){
                $result = $this->createQueryBuilder('s')
                    ->select('s')
                    ->where("s.id NOT IN (:subscriberIdsCustomFieldMinus)")
                    ->setParameter("subscriberIdsCustomFieldMinus", $subscriberIdsCustomFieldMinus)
                    ->andWhere("s.id IN (:subscriberIds)")
                    ->setParameter("subscriberIds", $subscribersIds)
                    ->orderBy('s.lastInteraction','DESC')
                    ->getQuery()
                    ->getResult();
            }

        }

        return $result;
    }

    /**
     * @param $page_id
     * @param $type
     * @return mixed
     * @throws \Doctrine\ORM\NonUniqueResultException
     */
    public function getNewCountSubscribers($page_id, $type){
        if($type == 1){
            $date = new \DateTime('-1 day');
        }
        elseif($type == 2){
            $date = new \DateTime('-7 day');
        }
        else{
            $date = new \DateTime('-1 month');
        }
        $query = $this->createQueryBuilder('s')
            ->select('count(s) as newSubscriber')
            ->where("s.page_id = :pageID")
            ->setParameter('pageID', $page_id)
            ->andWhere("s.status = :status")
            ->setParameter("status", true)
            ->andWhere("DATE_FORMAT(s.dateSubscribed, '%Y-%m-%d') >= :date")
            ->setParameter('date', $date->format('Y-m-d'));

        return $query->getQuery()->getOneOrNullResult();
    }
}
